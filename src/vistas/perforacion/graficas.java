/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas.perforacion;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.prefs.Preferences;
import models.modelHallazgosGen;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.*;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author taesi
 */
public class graficas extends javax.swing.JFrame {

    private ArrayList<modelHallazgosGen> hallazgosGen = new ArrayList<>();
    private ArrayList<modelHallazgosGen> hallazgosGenCerrados = new ArrayList<>();
    private ArrayList<modelHallazgosGen> hallazgosGenRel = new ArrayList<>();
    private ArrayList<modelHallazgosGen> hallazgosGenarles = new ArrayList<>();

    /**
     * Creates new form graficas
     */
    public graficas() {
        initComponents();
        capturaHallazgos();
        graficar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JpgraficaTorta = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        JpgraficaBarras = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        JpgraficaTorta2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout JpgraficaTortaLayout = new javax.swing.GroupLayout(JpgraficaTorta);
        JpgraficaTorta.setLayout(JpgraficaTortaLayout);
        JpgraficaTortaLayout.setHorizontalGroup(
            JpgraficaTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );
        JpgraficaTortaLayout.setVerticalGroup(
            JpgraficaTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jLabel1.setText("grafica de torta 1");

        javax.swing.GroupLayout JpgraficaBarrasLayout = new javax.swing.GroupLayout(JpgraficaBarras);
        JpgraficaBarras.setLayout(JpgraficaBarrasLayout);
        JpgraficaBarrasLayout.setHorizontalGroup(
            JpgraficaBarrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 293, Short.MAX_VALUE)
        );
        JpgraficaBarrasLayout.setVerticalGroup(
            JpgraficaBarrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 231, Short.MAX_VALUE)
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("grafica de barras 2 ");

        javax.swing.GroupLayout JpgraficaTorta2Layout = new javax.swing.GroupLayout(JpgraficaTorta2);
        JpgraficaTorta2.setLayout(JpgraficaTorta2Layout);
        JpgraficaTorta2Layout.setHorizontalGroup(
            JpgraficaTorta2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );
        JpgraficaTorta2Layout.setVerticalGroup(
            JpgraficaTorta2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jLabel3.setText("grafica de torta 3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(JpgraficaTorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JpgraficaBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(78, 78, 78)))
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(JpgraficaTorta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JpgraficaBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(26, 26, 26)
                        .addComponent(JpgraficaTorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JpgraficaTorta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(graficas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(graficas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(graficas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(graficas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new graficas().setVisible(true);
            }
        });
    }

    public void graficar() {

        DefaultPieDataset datos = new DefaultPieDataset();
        int sizeHallazgos = hallazgosGenarles.size();
        int cerradosSize = hallazgosGenCerrados.size();

        datos.setValue(" hallazgos generales", sizeHallazgos);
        datos.setValue("hallazgos cerrados", cerradosSize);
        JFreeChart graficoTorta = ChartFactory.createPieChart3D("hallazgos encontrados", datos, true, true, false);
        ChartPanel panel = new ChartPanel(graficoTorta);
        saveImage("graficoTorartaHallazgos", graficoTorta, 400, 200);
        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(400, 200));
        JpgraficaTorta.setLayout(new BorderLayout());
        JpgraficaTorta.add(panel, BorderLayout.NORTH);
        pack();
        repaint();
        graficaBarras();
        graficaTortaDos();

    }

    public void graficaTortaDos() {
        Preferences prefs = Preferences.userNodeForPackage(hallazgosGenerales.class);

        int aprovados = prefs.getInt("sizeAprovados", 0);
        int sinRevisar = prefs.getInt("sizeSinRevisar", 0);
        int sinEntegar = prefs.getInt("sizeSinEntregar", 0);
        DefaultPieDataset datos = new DefaultPieDataset();
        datos.setValue("Aprobado", aprovados);
        datos.setValue("Sin entregar", sinEntegar);
        datos.setValue("Sin revisar", sinRevisar);
        JFreeChart graficoTorta = ChartFactory.createPieChart3D("grafica certificados", datos, true, true, false);

        ChartPanel panel = new ChartPanel(graficoTorta);
        saveImage("graficoTortaCertificados", graficoTorta, 400, 200);
        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(400, 200));
        JpgraficaTorta2.setLayout(new BorderLayout());
        JpgraficaTorta2.add(panel, BorderLayout.NORTH);
        pack();
        repaint();

    }

    private void saveImage(String name, JFreeChart grafico, int alto, int ancho) {
        try {
            String routeFile = "graficos/" + name + ".png";
            File imagen = new File(routeFile);
            ChartUtilities.saveChartAsPNG(imagen, grafico, alto, ancho);
            Preferences prefs = Preferences.userNodeForPackage(graficas.class);
            prefs.put(name, imagen.getAbsolutePath());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void graficaBarras() {
        int sistema_leavante_critico = 0,
                sistema_leavante_mayor = 0,
                sistema_rotacion_mayor = 0,
                sistema_rotacion_critico = 0,
                sistema_circulacion_mayor = 0,
                sistema_circulacion_critico = 0,
                sistema_potencia_mayor = 0,
                sistema_potencia_critico = 0,
                sistema_pozo_mayor = 0,
                sistema_pozo_critico = 0,
                sistema_hse_mayor = 0,
                sistema_hse_critico = 0;
        for (int i = 0; i < hallazgosGen.size(); i++) {
            modelHallazgosGen payload = hallazgosGen.get(i);

            switch (payload.getPrioridad()) {
                case "CRÍTICO/EJECUCIÓN INMEDIATA":
                    if (payload.getNombreSistem().equals("SISTEMA DE LEVANTE")) {
                        sistema_leavante_critico++;
                    } else if (payload.getNombreSistem().equals("SISTEMA DE ROTACION")) {
                        sistema_rotacion_critico++;

                    } else if (payload.getNombreSistem().equals("SISTEMA DE CIRCULACION")) {
                        sistema_circulacion_critico++;

                    } else if (payload.getNombreSistem().equals("SISTEMA DE POTENCIA")) {
                        sistema_potencia_critico++;

                    } else if (payload.getNombreSistem().equals("SISTEMA DE CONTROL DE POZO")) {
                        sistema_pozo_critico++;

                    } else if (payload.getNombreSistem().equals("EQUIPO HSE")) {
                        sistema_hse_critico++;
                    }

                    break;
                case "MAYOR/EJECUCIÓN DURANTE OPERACIÓN":
                    if (payload.getNombreSistem().equals("SISTEMA DE LEVANTE")) {
                        sistema_leavante_mayor++;
                    } else if (payload.getNombreSistem().equals("SISTEMA DE ROTACION")) {
                        sistema_rotacion_mayor++;

                    } else if (payload.getNombreSistem().equals("SISTEMA DE CIRCULACION")) {
                        sistema_circulacion_mayor++;

                    } else if (payload.getNombreSistem().equals("SISTEMA DE POTENCIA")) {
                        sistema_potencia_mayor++;

                    } else if (payload.getNombreSistem().equals("SISTEMA DE CONTROL DE POZO")) {
                        sistema_pozo_mayor++;

                    } else if (payload.getNombreSistem().equals("EQUIPO HSE")) {
                        sistema_hse_mayor++;
                    }

                    break;

            }

        }

        DefaultCategoryDataset datos = new DefaultCategoryDataset();
        datos.addValue(sistema_leavante_critico, "criticos", "levante");
        datos.addValue(sistema_leavante_mayor, "mayores", "levante");

        datos.addValue(sistema_rotacion_critico, "criticos", "rotacion");
        datos.addValue(sistema_rotacion_mayor, "mayores", "rotacion");

        datos.addValue(sistema_circulacion_critico, "criticos", "circulacion");
        datos.addValue(sistema_circulacion_mayor, "mayores", "circulacion");

        datos.addValue(sistema_potencia_critico, "criticos", "potencia");
        datos.addValue(sistema_potencia_mayor, "mayores", "potencia");

        datos.addValue(sistema_pozo_critico, "criticos", "control de pozo");
        datos.addValue(sistema_pozo_mayor, "mayores", "control de pozo");

        datos.addValue(sistema_hse_critico, "criticos", " hse");
        datos.addValue(sistema_hse_mayor, "mayores", " hse");

        JFreeChart graficoTorta = ChartFactory.createBarChart3D("Distribucion De Hallazgos Criticos y Mayores", "Sistemas", "Estados", datos, PlotOrientation.VERTICAL, true, true, false);

        saveImage("graficoBarrasHallazgos", graficoTorta, 400, 200);
        ChartPanel panel = new ChartPanel(graficoTorta);

        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(400, 200));
        JpgraficaBarras.setLayout(new BorderLayout());
        JpgraficaBarras.add(panel, BorderLayout.NORTH);
        pack();
        repaint();

    }

    public void capturaHallazgos() {
        Preferences prefs = Preferences.userNodeForPackage(hallazgosGenerales.class);

        int sizeHallazgos = prefs.getInt("sizeHallazgos", 0);

        if (sizeHallazgos != 0) {
            for (int i = 0; i < sizeHallazgos; i++) {
                int tipoHallazgo = prefs.getInt("tipoHallazgo" + i, 0);

                modelHallazgosGen hallazgo = new modelHallazgosGen();
                hallazgo.setNombreSistem(prefs.get("nombreSistem" + i, ""));
                hallazgo.setNombreEquipo(prefs.get("nombreEquipo" + i, ""));
                hallazgo.setDesc(prefs.get("Desc" + i, ""));
                hallazgo.setImgUno(prefs.get("imgUno" + i, ""));
                hallazgo.setImgDos(prefs.get("imgDos" + i, ""));
                hallazgo.setImgTres(prefs.get("imgTres" + i, ""));
                hallazgo.setPrioridad(prefs.get("prioridad" + i, ""));
                hallazgo.setTipoHallazgo(tipoHallazgo);
                hallazgosGen.add(hallazgo);

            }

            for (int i = 0; i < hallazgosGen.size(); i++) {
                modelHallazgosGen hallazgo = hallazgosGen.get(i);

                switch (hallazgo.getTipoHallazgo()) {

                    case 0:
                        modelHallazgosGen hallazgoGeneral = new modelHallazgosGen();
                        hallazgoGeneral.setNombreSistem(hallazgo.getNombreSistem());
                        hallazgoGeneral.setNombreEquipo(hallazgo.getNombreEquipo());
                        hallazgoGeneral.setDesc(hallazgo.getDesc());
                        hallazgoGeneral.setImgUno(hallazgo.getImgUno());
                        hallazgoGeneral.setImgDos(hallazgo.getImgDos());
                        hallazgoGeneral.setImgTres(hallazgo.getImgTres());
                        hallazgoGeneral.setPrioridad(hallazgo.getPrioridad());
                        hallazgoGeneral.setTipoHallazgo(hallazgo.getTipoHallazgo());
                        hallazgosGenarles.add(hallazgoGeneral);

                        break;
                    case 1:
                        modelHallazgosGen hallazgoCerrado = new modelHallazgosGen();
                        hallazgoCerrado.setNombreSistem(hallazgo.getNombreSistem());
                        hallazgoCerrado.setNombreEquipo(hallazgo.getNombreEquipo());
                        hallazgoCerrado.setDesc(hallazgo.getDesc());
                        hallazgoCerrado.setImgUno(hallazgo.getImgUno());
                        hallazgoCerrado.setImgDos(hallazgo.getImgDos());
                        hallazgoCerrado.setImgTres(hallazgo.getImgTres());
                        hallazgoCerrado.setPrioridad(hallazgo.getPrioridad());
                        hallazgoCerrado.setTipoHallazgo(hallazgo.getTipoHallazgo());
                        hallazgosGenCerrados.add(hallazgoCerrado);

                        break;
                    case 2:
                        modelHallazgosGen hallazgoRelevante = new modelHallazgosGen();
                        hallazgoRelevante.setNombreSistem(hallazgo.getNombreSistem());
                        hallazgoRelevante.setNombreEquipo(hallazgo.getNombreEquipo());
                        hallazgoRelevante.setDesc(hallazgo.getDesc());
                        hallazgoRelevante.setImgUno(hallazgo.getImgUno());
                        hallazgoRelevante.setImgDos(hallazgo.getImgDos());
                        hallazgoRelevante.setImgTres(hallazgo.getImgTres());
                        hallazgoRelevante.setPrioridad(hallazgo.getPrioridad());
                        hallazgoRelevante.setTipoHallazgo(hallazgo.getTipoHallazgo());
                        hallazgosGenRel.add(hallazgoRelevante);
                        break;

                }

            }

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JpgraficaBarras;
    private javax.swing.JPanel JpgraficaTorta;
    private javax.swing.JPanel JpgraficaTorta2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
